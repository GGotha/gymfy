generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// We donÂ´t have support for MySQL Timezone, so we did a workaround here
// https://github.com/prisma/prisma/issues/5051

model User {
  id         String    @id @default(uuid())
  id_role    String
  id_plan    String?
  email      String    @unique
  password   String
  name       String
  plan_expired_at DateTime? 
  created_at DateTime  @db.DateTime  @default(dbgenerated("NOW()"))
  updated_at DateTime? @db.DateTime @default(dbgenerated("NOW() ON UPDATE NOW()"))
 

  role Role @relation(fields: [id_role], references: [id])
  plan Plan? @relation(fields: [id_plan], references: [id])

  Checkin Checkin[]
  Transaction Transaction[]
  Notification Notification[]

  @@map("users")
}

model Role {
  id         String    @id @default(uuid())
  name       String
  active     Boolean
  created_at DateTime  @db.DateTime  @default(dbgenerated("NOW()"))
  updated_at DateTime? @db.DateTime @default(dbgenerated("NOW() ON UPDATE NOW()"))

  user User[]

  @@map("roles")
}

model Checkin {
  id         String    @id @default(uuid())
  id_user    String
  created_at DateTime  @db.DateTime  @default(dbgenerated("NOW()"))
  updated_at DateTime? @db.DateTime @default(dbgenerated("NOW() ON UPDATE NOW()"))

  user User @relation(fields: [id_user], references: [id])

  @@map("checkins")
}

model Plan {
  id         String    @id @default(uuid())
  name       String
  brl_amount Decimal   @db.Decimal(15,2)
  image      String   
  description String   
  created_at DateTime  @db.DateTime  @default(dbgenerated("NOW()"))
  updated_at DateTime? @db.DateTime @default(dbgenerated("NOW() ON UPDATE NOW()"))

  user User[]

  @@map("plans")
}

model TransactionType {
  id         String    @id @default(uuid())
  name       String
  created_at DateTime  @db.DateTime  @default(dbgenerated("NOW()"))
  updated_at DateTime? @db.DateTime @default(dbgenerated("NOW() ON UPDATE NOW()"))

  transactions Transaction[]

  @@map("transaction_types")
}
model Transaction {
  id         String    @id @default(uuid())
  id_user    String
  id_type    String
  gyc_amount Decimal   @db.Decimal(15,2)
  brl_amount Decimal   @db.Decimal(15,2)
  created_at DateTime  @db.DateTime  @default(dbgenerated("NOW()"))
  updated_at DateTime? @db.DateTime @default(dbgenerated("NOW() ON UPDATE NOW()"))

  transactionType TransactionType @relation(fields: [id_type], references: [id])
  user User @relation(fields: [id_user], references: [id])

  @@map("transactions")
}
model Event {
  id         String    @id @default(uuid())
  type String
  text String
  created_at DateTime  @db.DateTime  @default(dbgenerated("NOW()"))
  updated_at DateTime? @db.DateTime @default(dbgenerated("NOW() ON UPDATE NOW()"))

  Notification Notification[]

  @@map("events")
}

model Notification {
  id         String    @id @default(uuid())
  id_user_to_notify String
  id_event String
  seen_by_user Boolean @default(false)
  created_at DateTime  @db.DateTime  @default(dbgenerated("NOW()"))
  updated_at DateTime? @db.DateTime @default(dbgenerated("NOW() ON UPDATE NOW()"))

  user User @relation(fields: [id_user_to_notify], references: [id])
  event Event @relation(fields: [id_event], references: [id])

  @@map("notifications")
}
